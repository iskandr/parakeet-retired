printf "\n---Cleaning previous build---\n";
ocamlbuild -clean

cd CQInterface
make clean
cd ..

cd OCAMLInterface
make clean
cd ..

printf "\n---Building LibPQ---\n";
cd libpq
make clean 
make
cd ..

# Build parameters

DIRS=Base,Ptx,GPU,Q,ResourceManager,extlib,Tests,AST,ANF,Imp,UntypedSSA,CQInterface,Dump,SSA

LIBS=unix,str,bigarray 
OBJS="CQInterface/QType.o CQInterface/Debug.o Init.o Callbacks.o"
LINKER_FLAGS="-ccopt $PQ_PATH/libpq_stubs.o, \
 -ccopt $PQ_PATH/cuda_stubs.o, \
 -ccopt -L/usr/local/cuda/lib/ \
 -ccopt -L/usr/lib/nvidia-current \
 -ccopt -lcuda \
 -ccopt -lcudart \
 -ccopt $PQ_PATH/../OCAMLInterface/ocaml_interface.a"
OCAMLPP="-pp camlp4o -ppflag pa_macro.cmo"

SUFFIX=
TARGET="preprocess.native"
PPFLAGS=
MAKEFLAGS=
FINALTARGET=

if [ "prof" == "$1" ]; then
  SUFFIX=".p"
  MAKEFLAGS="PROF=1"
  FINALTARGET="Time.p.native"
fi
if [ "debug" == "$1" ]; then
  PPFLAGS="-ppflag -DDEBUG"
  MAKEFLAGS="DEBUG=1"
fi

printf "\n---Building OCAML Interface---\n"
cd OCAMLInterface;
make $MAKEFLAGS;
cd ..

if [  "tests!" == "$1" ]; then 
  printf "\n---Building tests---\n";
  ocamlbuild Tests/tests.native -no-hygiene -Is $DIRS $OBJS \
    -libs $LIBS -lflags "$LINKER_FLAGS" -ocamlyacc menhir -yaccflag --infer;

  printf "\n---Running tests---\n";
 _build/Tests/tests.native;
else
  printf "\n---Building CUDA/Q---\n";

  ocamlbuild $OCAMLPP $PPFLAGS -Is $DIRS -no-hygiene \
    "Q/QSyntax"${SUFFIX}".cmxa" 

  if [ -n TARGET ]; then
    ocamlbuild $TARGET $OCAMLPP $PPFLAGS -no-hygiene -Is $DIRS $OBJS \
      -libs $LIBS -lflags "$LINKER_FLAGS" -ocamlyacc menhir
  fi

  ocamlbuild $OCAMLPP $PPFLAGS -Is $DIRS -no-hygiene -ocamlyacc menhir \
    "Callbacks"${SUFFIX}".cmx"

  cd CQInterface;
  make $MAKEFLAGS;
  mv *.o ../_build;
  mv cinterface.so ../_build;
  cd ..

  if [ -n FINALTARGET ]; then
    ocamlbuild $OCAMLPP $PPFLAGS $FINALTARGET -Is $DIRS $OBJS \
      -libs $LIBS -lflags "$LINKER_FLAGS" -ocamlyacc menhir
  fi
fi
######################################################

printf "\n---Cleaning previous build---\n";
ocamlbuild -clean

cd CQInterface
make clean
cd ..

printf "\n---Building LibPQ---\n";
cd libpq
make clean 
make
cd ..

printf "\n---Building Ocaml/C Interface---\n";
cd OCAMLInterface
make clean
make
cd ..

DIRS=Base,Ptx,GPU,Q,ResourceManager,extlib,Tests,AST,ANF,\
Imp,UntypedSSA,CQInterface,Dump,SSA
# -ccopt $PQ_PATH/libpq.so, \

LIBS=unix,str,bigarray 
OBJS="CQInterface/QType.o CQInterface/Debug.o Init.o Callbacks.o"
LINKER_FLAGS="-ccopt $PQ_PATH/libpq_stubs.o, \
 -ccopt $PQ_PATH/cuda_stubs.o, \
 -ccopt -L/usr/local/cuda/lib/ \
 -ccopt -L/usr/lib/nvidia-current \
 -ccopt -lcuda \
 -ccopt -lcudart \
 -ccopt $PQ_PATH/../OCAMLInterface/ocaml_interface.a"

if [  "tests!" == "$1" ]; then 
  printf "\n---Building tests---\n";
  ocamlbuild Tests/tests.native -no-hygiene -Is $DIRS $OBJS \
-libs $LIBS -lflags "$LINKER_FLAGS" -ocamlyacc menhir -yaccflag --infer;

  printf "\n---Running tests---\n";
 _build/Tests/tests.native;
else if [ "prof" == "$1" ]; then
  printf "\n---Building Profiled Version of Q preprocessor---\n";

  ocamlbuild -Is $DIRS -no-hygiene Q/QSyntax.p.cmxa 

  ocamlbuild -Is $DIRS -no-hygiene -ocamlyacc menhir Callbacks.p.cmx

  cd CQInterface;
  make PROF=1;
  mv *.o ../_build;
  mv cinterface.so ../_build;
  cd ..

  ocamlbuild Time.p.native -Is $DIRS $OBJS \
  -libs $LIBS -lflags "$LINKER_FLAGS" -ocamlyacc menhir

  #printf "\n---Building Profiled Version of C/Q interface---\n"; 
  #cd CQInterface;
  #make PROF=1;
  #mv dt.o ../_build/dt.o;
  #cd ..
else
  printf "\n---Building Q preprocessor---\n"; 

# for some mysterious reason Ocamlbuild doesn't see the dependencies of QParser.mly
# so I'm building those on their own. Hackish, but I don't understand ocamlbuild well 
# enough to do anything else. (alexr 5/28/2010)
  ocamlbuild -Is $DIRS -no-hygiene Q/QSyntax.cmxa 

  ocamlbuild preprocess.native -no-hygiene -Is $DIRS $OBJS \
  -libs $LIBS -lflags "$LINKER_FLAGS" -ocamlyacc menhir  

  printf "\n---Building C/Q interface---\n"; 
  cd CQInterface;
  make;
  mv *.o ../_build;
  cd ..
fi
fi
