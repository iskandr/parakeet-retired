open Base
open UntypedSSA
open UntypedFindDefs
open UntypedFindConstants 


let rec eval_block defEnv constEnv block =  
  let rec aux  = function 
    | stmt::stmts -> 
        let stmt', changed = eval_stmt defEnv constEnv stmt in
        let rest, restChanged = aux stmts in 
        stmt' :: rest, (changed || restChanged)  
    | [] -> [], false
  in aux block 
  
and eval_stmt defEnv constEnv stmtNode = 
  match stmtNode.stmt with 
  | Set (id, rhs) ->  
    let rhs', changed = eval_exp defEnv constEnv rhs in
    {stmtNode with stmt = Set (id, rhs') }, changed
  | Ignore rhs -> 
    let rhs', changed = eval_exp defEnv constEnv rhs in 
    {stmtNode with stmt = Ignore rhs' }, changed
  | If (cond, trueBlock, falseBlock, ifGate) ->
    let trueBlock', trueChanged = eval_block defEnv constEnv trueBlock in 
    let falseBlock', falseChanged = eval_block defEnv constEnv falseBlock in
    let stmtNode' = 
      {stmtNode with stmt = If(cond, trueBlock', falseBlock', ifGate)}
    in 
    stmtNode', trueChanged || falseChanged     
  | other -> stmtNode, false
and eval_exp defEnv constEnv expNode = 
  match expNode.exp with 
  | App (Var fnId, args) -> 
    (match PMap.find fnId defEnv with 
     | SingleDef (App(Var fnId', args')) 
       when is_function_constant constEnv fnId' ->
       {expNode with exp = App(Var fnId', args' @ args)}, true
     | _ -> expNode, false
    )
  | Value v -> 
    let v', changed = eval_value defEnv constEnv v in 
    {expNode with exp = Value v'}, changed
  
  | _ -> expNode, false  
and eval_value defEnv constEnv = function 
  | Lam fundef -> 
    let body', changed = eval_block defEnv constEnv fundef.body in 
    Lam {fundef with body = body'}, changed
  | v -> v, false 
  
let elim_partial_apps block = 
  let defEnv = UntypedFindDefs.find_defs block in
  let constEnv = UntypedFindConstants.find_constants block in 
  eval_block defEnv constEnv block 